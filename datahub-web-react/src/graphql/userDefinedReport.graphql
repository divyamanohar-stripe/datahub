query getUserDefinedReport($urn: String!) {
    userDefinedReport(urn: $urn) {
        id
        urn
        type
        ownership {
            owners {
                owner {
                    ... on CorpUser {
                        urn
                        type
                        username
                    }
                    ... on CorpGroup {
                        urn
                        type
                        name
                    }
                }
                type
            }
        }
        properties {
            name
            type
            description
        }
        entities {
            searchResults {
                entity {
                    urn
                    type
                    ... on DataJob {
                        urn
                    }
                }
            }
        }
    }
}

query listUserDefinedReports($input: ListUserDefinedReportsInput!) {
    listUserDefinedReports(input: $input) {
        start
        count
        total
        userDefinedReports {
            urn
            id
            properties {
                name
                type
                description
            }
            ownership {
                ...ownershipFields
            }
            entities(input: { start: 0, count: 1 }) {
                total
            }
        }
    }
}

query getUserDefinedReportContent($urn: String!, $entityStart: Int, $entityCount: Int, $runStart: Int, $runCount: Int) {
    userDefinedReport(urn: $urn) {
        urn
        id
        ownership {
            ...ownershipFields
        }
        properties {
            name
            type
            description
        }
        entities(input: {start: $entityStart, count: $entityCount}) {
            start
            count
            total
            searchResults {
                entity {
                    urn
                    type
                    ... on DataJob {
                        urn
                        type
                        jobId
                        dataFlow {
                            platform {
                                ...platformFields
                            }
                        }
                        ownership {
                            ...ownershipFields
                        }
                        properties {
                            name
                            description
                            externalUrl
                            customProperties {
                                key
                                value
                            }
                        }
                        globalTags {
                            ...globalTagsFields
                        }
                        runs(input: { start: $runStart, count: $runCount }) {
                            count
                            start
                            total
                            runs {
                                urn
                                type
                                properties {
                                    customProperties {
                                        key
                                        value
                                    }
                                }
                                name
                                externalUrl
                            }
                        }
                    }
                }
            }
        }
    }
}

mutation createUserDefinedReport($input: CreateUserDefinedReportInput!) {
    createUserDefinedReport(input: $input)
}

query getUserDefinedReportContentType($urn: String!) {
    userDefinedReport(urn: $urn) {
        urn
        properties {
            name
            type
        }
    }
}

query getUserDefinedReportContentFilterLogicalDate($urn: String!, $entityStart: Int, $entityCount: Int, $input: DataProcessInstanceInput) {
    userDefinedReport(urn: $urn) {
        urn
        id
        ownership {
            ...ownershipFields
        }
        properties {
            name
            type
            description
        }
        entities(input: {start: $entityStart, count: $entityCount}) {
            start
            count
            total
            searchResults {
                entity {
                    urn
                    type
                    ... on DataJob {
                        urn
                        type
                        jobId
                        dataFlow {
                            platform {
                                ...platformFields
                            }
                        }
                        ownership {
                            ...ownershipFields
                        }
                        properties {
                            name
                            description
                            externalUrl
                            customProperties {
                                key
                                value
                            }
                        }
                        globalTags {
                            ...globalTagsFields
                        }
                        runs(input: $input) {
                            count
                            start
                            total
                            runs {
                                urn
                                execution {
                                    logicalDate
                                    startDate
                                    endDate
                                }
                                type
                                properties {
                                    customProperties {
                                        key
                                        value
                                    }
                                }
                                name
                                externalUrl
                            }
                        }
                    }
                }
            }
        }
    }
}
