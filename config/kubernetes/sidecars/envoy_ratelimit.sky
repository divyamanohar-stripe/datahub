# DO NOT EDIT: http://go/vendor-skycfg
# team: reliability-patterns-and-practices
load("config/kubernetes/core/container.sky", "container", "container_port")
load("config/kubernetes/core/env_var.sky", "container_env_vars")
load("config/kubernetes/helpers/context.sky", "get_env", "get_cluster")
load("config/kubernetes/helpers/images.sky", "image", "sidecar_image")
load("config/kubernetes/plugins/compose.sky", "compose_plugins")
load("config/kubernetes/networking/internal/helpers.sky", "host_mount_stripe_cas")
load(
    "config/kubernetes/helpers/security.sky",
    "mount_credentials_proxy",
    "use_credentials_proxy",
)


# Defines how to extract the kubernetes namespace value and pass it process
#   `env_var` defines the environment variable within the pod runtime environment in which to store the value
#   `tag_key` defines the key of the tag/dimension that will be added to metrics
#   `field` defines what the value of the environment variable will be. It is a reference to fields from the [kubernetes downwards api](https://kubernetes.io/docs/tasks/inject-data-application/environment-variable-expose-pod-information/#use-pod-fields-as-values-for-environment-variables)
NAMESPACE = struct(
    env_var = "K8S_NAMESPACE",
    tag_key = "namespace",
    field = "metadata.namespace",
)

# We support the following:
# bom - QA and Prod
# northwest - QA and Prod
# cmh - QA (don't fail but there is no redis cluster in QA), Preprod, Prod (nw cluster)
# All other options will fail.
def get_redis_cluster_addr(ctx):
    if get_cluster(ctx) not in ["bom", "northwest", "cmh"] or get_env(ctx) not in ["qa", "preprod", "prod"]:
        fail("Invalid cluster/env combination: {}/{}".format(get_cluster(ctx), get_env(ctx)))

    if get_cluster(ctx) == "cmh":
        if get_env(ctx) == "qa":
            # Returning empty string here is equivalent to turning off global ratelimit.
            return ""

    # Don't allow bom/northwest to have preprod
    if get_cluster(ctx) in ["bom", "northwest"] and get_env(ctx) == "preprod":
        fail("Invalid cluster/env combination: {}/{}".format(get_cluster(ctx), get_env(ctx)))

    return "service-to-service-ratelimit.elasticache.{}.{}.stripe.io:6379".format(get_cluster(ctx), get_env(ctx))

MEMENTO_ROLLOUT_HOST_TYPES = [
    "userauthcodegrpc",
    "merchant-ui-api",
]

def get_cache_arg(ctx, host_type):
    if get_cluster(ctx) == "northwest" and get_env(ctx) == "qa":
        return ["--use-memento"]
    if get_cluster(ctx) == "cmh" and get_env(ctx) in ["qa", "preprod"]:
        return ["--use-memento"]
    if get_cluster(ctx) in ["northwest", "cmh"] and get_env(ctx) == "prod" and host_type in MEMENTO_ROLLOUT_HOST_TYPES:
        return ["--use-memento"]

    return ["--redis-cluster-address", get_redis_cluster_addr(ctx)]

def get_config_srv_addr(ctx):
    # CMH, NW do have config-srv
    # BOM and others don't have config-srv.
    if get_cluster(ctx) in ["northwest", "cmh"]:
        return "config-srv.service.envoy:10080"
    else:
        return "config-srv.northwest.service.envoy:10080"

def get_updater_logging_option(ctx, host_type):
    # KProxy is emitting tons of logs as they have thousands of buckets.
    # By setting a command-line-arg we'll silence those.
    if get_env(ctx) in ["preprod", "prod", "qa"] and host_type in ["kproxy"]:
        return ["--no-log-update-lines"]
    else:
        return []

def ratelimit_sidecar(ctx, label, host_type):
    """
    Adds the Envoy-RateLimit sidecar to the deployment.
    This sidecar is needed to perform global rate-limiting.
    Ports exposed/Listeners:
        20081 - GRPC, used by Envoy calling into the sidecar
        20082 - HTTP

    Args:
        label: DEPRECATED (no longer used)
        host_type: The logical host-type/pod-type. Used by the sidecar when loading configuration.

    Returns:
        A plugin that installs the envoy-ratelimit-srv sidecar.
    """
    command = ["/bin/envoy-ratelimit-srv", "--host-type", host_type, "--stats-addr", "127.0.0.1:8200", "--use-config-srv", "--config-srv-address", get_config_srv_addr(ctx)]
    command.extend(get_cache_arg(ctx, host_type))
    command.append("--use-global-ratelimiter")
    command.extend(get_updater_logging_option(ctx, host_type))
    return compose_plugins(
        container(
            name = "envoy-ratelimit-srv",
            image = sidecar_image(ctx,
                name = "envoy-ratelimit-srv-image",
                fallback = image(
                    ctx,
                    "stripe/traffic/envoy-ratelimit-srv",
                    label = "latest",
                ),
            ),
            command = command,
            sidecar_service = "envoy-ratelimit-srv-image",
            plugins = [
                container_env_vars(from_fields = {
                    NAMESPACE.env_var: NAMESPACE.field,
                }),
            ],
            # Memento needs access to stripe-cas for authentication
        ),
        container_port(20081, "envoy-ratelimit-srv", "grpc"),
        container_port(20082, "envoy-ratelimit-srv", "http"),
        host_mount_stripe_cas("envoy-ratelimit-srv"),
        use_credentials_proxy(),
        mount_credentials_proxy("envoy-ratelimit-srv"),
    )
