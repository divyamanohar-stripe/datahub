# DO NOT EDIT: http://go/vendor-skycfg
load(
    "config/kubernetes/core/container.sky",
    "container",
    "container_port",
)
load("config/kubernetes/helpers/context.sky", "get_env")
load("config/kubernetes/plugins/compose.sky", "compose_plugins")
load("config/kubernetes/networking/internal/common.sky", "POD_NETWORKING_BASEDIR")
load(
    "config/kubernetes/networking/internal/helpers.sky",
    "mount_splunk_forwarded_basedir",
    "pod_mount",
)
load(
    "config/kubernetes/networking/internal/config/envoy-monitor-config.sky",
    "generate_monitor_cli_args",
)
load("config/kubernetes/helpers/constants.sky", "ENVOY_MONITOR_SIDECAR_NAME")
load(
    "config/kubernetes/networking/internal/envoy-config-srv.sky",
    "envoy_monitor_config",
)
# When trying to test a digest from a non-master branch, use stripe-qa instead of stripe in the URI

_CONTAINER_IMAGES = {
    # CI Build  : https://cibot.corp.stripe.com/builds/kube-tools--bui_MJMnQLGz30uqg9
    # Git Commit: 9b32ec67d08b6bccc24fac2e21ad74150595d04c
    # Summary   : 08/25/2022: envoy-config-srv: enable streamed initial snapshot in prod (#3049)
    "prod":    "containers.global.prod.stripe.io/stripe/traffic/envoy-monitor@sha256:ede3d87c0acdcc6078b5ebf00b206e1b65f0311a2928b7ec1623837499af44a5",
    "preprod": "containers.global.prod.stripe.io/stripe/traffic/envoy-monitor@sha256:ede3d87c0acdcc6078b5ebf00b206e1b65f0311a2928b7ec1623837499af44a5",
    "qa":      "containers.global.prod.stripe.io/stripe/traffic/envoy-monitor@sha256:ede3d87c0acdcc6078b5ebf00b206e1b65f0311a2928b7ec1623837499af44a5",
}


ENVOY_MONITOR_PORT = 18300
_envoy_monitor_logdir = "%s/envoy-monitor" % POD_NETWORKING_BASEDIR
_veneur_sock_dir = "/veneur-sockets"  # FIXME(xyu): metrics.sky should expose this as a constant

def envoy_monitor_sidecar(ctx, namespace, config):
    name = ENVOY_MONITOR_SIDECAR_NAME
    return compose_plugins(
        envoy_monitor_container(
            ctx,
            name,
            namespace = namespace,
            config = config,
        ),
        mount_splunk_forwarded_basedir(container_name = name),
        pod_mount(name, _veneur_sock_dir),
    )

def envoy_monitor_container(ctx, self, namespace, config):
    """Generates the k8s container spec for the `envoy-monitor`."""
    upstream_stats_sock = "%s/statsd.sock" % _veneur_sock_dir
    container_image = _CONTAINER_IMAGES.get(get_env(ctx))
    if container_image == None:
        fail("Unexpected environment %s, could not find corresponding envoy-monitor container image" % get_env(ctx))

    cli_args = generate_monitor_cli_args(config)
    command = [
        "/bin/envoy-monitor",
        "--proxy-upstream-addr=unixgram://%s" % upstream_stats_sock,
        "--proxy-listen-addr=udp://localhost:%s" % ENVOY_MONITOR_PORT,
        "--log-gauge",
        "--gauge-log-destination=%s/envoy-gauge-metrics.log" % _envoy_monitor_logdir,
        "--process-names=envoy-stripe.stripped",
        "--process-names=envoy-config-srv",
        "--process-names=envoy-monitor",
        "--use-raw-config-json=" + json.marshal(envoy_monitor_config()),
    ]

    if cli_args["envoy_scrape_histogram_metrics"]:
        command.append("--scrape-histogram-metrics")

    return container(
        name = self,
        image = container_image,
        command = command,
        sidecar_service = self,
        plugins = [
            container_port(
                ENVOY_MONITOR_PORT,
                container_name = self,
                port_name = "envoy-monitor",
            ),
        ],
    )
