# DO NOT EDIT: http://go/vendor-skycfg
"""
Helpers for defining quantities of resources for Kubernetes limits and requests.
"""

Quantity = proto.package("k8s.io.apimachinery.pkg.api.resource").Quantity

def cores(val):
    """
    Create a quantity for a whole number of CPU cores.

    Args:
        val: An integer for the number of cores that should be represented.

    Returns:
        A quantity that can be passed to the `cpu` parameter of a `container`.
    """
    if type(val) != "int":
        fail("Called cores with a non-integer")

    return Quantity(string = "%d.0" % val)

def millicores(val):
    """
    Create a quantity for a fractional number of CPU cores.

    Args:
        val: An integer for the number of millicores (1/1000th of a core) that should be represented.

    Returns:
        A quantity that can be passed to the `cpu` parameter of a `container`.
    """
    if type(val) != "int":
        fail("Called millicores with a non-integer")

    # Our dialect of skylark doesn't support floats, so we need to generate a float string
    # manually
    whole_cores = val // 1000
    sub_cores = val - whole_cores * 1000

    return Quantity(string = "%d.%d" % (whole_cores, sub_cores))

def megabytes(val):
    """
    Create a quantity for a whole number of megabytes.

    Args:
        val: An integer for the number of megabytes that should be represented.

    Returns:
        A quantity that can be passed to the `memory` parameter of a `container`.
    """
    if type(val) != "int":
        fail("Called megabytes with a non-integer")

    return Quantity(string = "%dMi" % val)

def gigabytes(val):
    """
    Create a quantity for a whole number of gigabytes.

    Args:
        val: An integer for the number of gigabytes that should be represented.

    Returns:
        A quantity that can be passed to the `memory` parameter of a `container`.
    """
    if type(val) != "int":
        fail("Called gigabytes with a non-integer")

    return Quantity(string = "%dGi" % val)
